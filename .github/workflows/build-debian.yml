name: Build Debian Packages

on:
  push:
    branches: main
    paths:
      - 'stage/**'
      - '.github/**'
  repository_dispatch:
  workflow_dispatch:

jobs:
  find-updates:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        stage: [unstable, testing, release]
        distro: [ubuntu]
        codename: [focal, impish]
        arch: [amd64]
    steps:
      - name: Set Job Parameters
        id: init
        run: |
          echo ::set-output name=stage::${{ matrix.stage }}
          echo ::set-output name=distro::${{ matrix.distro }}
          echo ::set-output name=codename::${{ matrix.codename }}
          echo ::set-output name=arch::${{ matrix.arch }}
          echo ::set-output name=target::${{ matrix.stage }}-${{ matrix.distro }}-${{ matrix.codename }}-${{ matrix.arch }}
          echo ::set-output name=s3_bucket::regolith-${{ matrix.stage }}-${{ matrix.distro }}-${{ matrix.codename }}-${{ matrix.arch }}
          echo ::set-output name=repo_url::https://regolith-${{ matrix.stage }}-${{ matrix.distro }}-${{ matrix.codename }}-${{ matrix.arch }}.s3.us-east-2.amazonaws.com
          echo ::set-output name=manifest_file::$GITHUB_WORKSPACE/stage/${{ matrix.stage }}/${{ matrix.distro }}/${{ matrix.codename }}/${{ matrix.arch }}/manifest.txt
      - uses: actions/checkout@v2
      - name: Find Package Updates
        run: |
          $GITHUB_WORKSPACE/.github/scripts/compute-package-changes.sh $GITHUB_WORKSPACE ${{ steps.init.outputs.stage }}  ${{ steps.init.outputs.distro }}  ${{ steps.init.outputs.codename }}  ${{ steps.init.outputs.arch }} /tmp/manifest-build
      - id: git-changes
        name: Check for Changes
        uses: kgilmer/simple-git-has-changes-action@v0.3
      - id: find-changed-packages
        name: Find changed packages
        run: |
          PKG_LIST=$(git diff --diff-filter=AM | grep '^[+|-][^+|-]' | cut -d" " -f1 | cut -c2- | uniq | sort)
          echo ::set-output name=package_build_list::$PKG_LIST
          echo "Updated packages: $PKG_LIST"
      - name: Pull repo from S3
        if: steps.git-changes.outputs.changed == 1
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY }}
          source: 's3://${{ steps.init.outputs.s3_bucket }}'
          dest: 'generated-repo'
      - name: Build Packages
        if: steps.git-changes.outputs.changed == 1
        run: |
          export DEBEMAIL="regolith.linux@gmail.com"
          export DEBFULLNAME="Regolith Linux"
          sudo apt update
          sudo apt install -y devscripts reprepro
          mkdir -p ~/.gnupg/
          printf "${{ secrets.PACKAGE_PRIVATE_KEY }}" | base64 --decode > ~/.gnupg/private.key
          gpg --batch --import ~/.gnupg/private.key
          $GITHUB_WORKSPACE/.github/scripts/build-debian-package.sh ${{ steps.init.outputs.stage }}  ${{ steps.init.outputs.distro }}  ${{ steps.init.outputs.codename }}  ${{ steps.init.outputs.arch }} $GITHUB_WORKSPACE/generated-repo ${{ steps.init.outputs.repo_url }} /tmp/package-build default
      - name: Push repo to S3
        if: steps.git-changes.outputs.changed == 1
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY }}
          source: 'generated-repo'
          dest: 's3://${{ steps.init.outputs.s3_bucket }}'
          flags: --recursive
      - name: S3 Cleanup
        if: steps.git-changes.outputs.changed == 1
        run: |
          find generated-repo
          rm -Rf generated-repo
      - name: Upload Manifest
        uses: actions/upload-artifact@v2
        if: steps.git-changes.outputs.changed == 1
        with:
          name: ${{ steps.init.outputs.target }}
          path: ${{ steps.init.outputs.manifest_file }}
          retention-days: 1
  update-manifests:
    runs-on: ubuntu-20.04
    needs: find-updates
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Debug
        run: |
          set -x
          for archive_file in $GITHUB_WORKSPACE/artifacts; do
            path=$(echo "$archive_file" | sed 's/-/\//g')
            cp "$archive_file/manifest.txt" "$REPO_ROOT/stage/$path/"
          done
          find $GITHUB_WORKSPACE/artifacts
          find $GITHUB_WORKSPACE/stage
          rm -Rf artifacts
      - name: Commit Manifest Updates
        run: |
            git pull
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add stage/*
            git commit -am "Automated update"
            git push origin main
